# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
library(tidyverse)    # functions for data manipulation
library(ggplot2)
library(MASS)
library(dplyr)
library(GGally)
library(kableExtra)
library(DT)
# import data
bikes <- read.csv('bikes_hour.csv')
datatable(bikes)
#data type of variables
str(bikes)
# check NAs
colSums(is.na(bikes))
# check zeros
colSums(bikes == 0, na.rm = TRUE)
# correlation between numeric variables
num_corr_tb<- bikes %>%
#include dplyr::, otherwise dplyr would clash with MASS package
dplyr::select(-season, -dteday, -instant, -holiday, -weekday,
-workingday, -registered)
#num_corr_tb
datatable(cor(num_corr_tb))
# fit the GAM model for linear regression
gam_lin = gam( count ~ s(temperature) + s(windspeed) +
workingday + season,
data = bikes )
library(gam)
#library(mgcv)
# fit the GAM model for linear regression
gam_lin = gam( count ~ s(temperature) + s(windspeed) +
workingday + season,
data = bikes )
summary(gam_lin)
par( mfrow = c(1,4) )
plot( gam_lin,  se = TRUE, col = "blue" )
# convert Gender to factor
bikes1 = bikes
bikes1$workingday = factor(bikes1$workingday)
bikes1$season = factor(bikes1$season)
# fit the GAM model for linear regression with updated Gender(factorized)
gam1_lin = gam( count ~ s(temperature) + s(windspeed) +
workingday + season,
data = bikes1 )
summary(gam1_lin)
par( mfrow = c(1,4) )
plot( gam1_lin,  se = TRUE, col = "blue" )
preds_gam_lin <- predict( gam1_lin,
newdata = data.frame( temperature = 0.40, windspeed = 0.5,
workingday = '1', season = '3' )  )
preds_gam_lin
library(gam)
# linear fit
linear_mod = gam( count ~ temperature + windspeed +
workingday + season,
data = bikes1 )
summary(linear_mod)
preds_lin <- predict( linear_mod,
newdata = data.frame( temperature = 0.40, windspeed = 0.5,
workingday = '1', season = '3' )   )
preds_lin
AIC(linear_mod)
AIC(gam1_lin)
anova(linear_mod, gam1_lin, test="Chisq")
## convert Gender and Subscription.Status to factor
bikes2 = bikes
bikes2$workingday = factor(bikes2$workingday)
bikes2$season = factor(bikes2$season)
# fit the GAM model for logistic regression
gam_log = gam( workingday ~ s(temperature) + s(windspeed) +
s(count) + season,
data = bikes2 , family = binomial)
summary(gam_log)
par( mfrow = c(1,4) )
plot( gam_log,  se = TRUE, col = "blue" )
# prediction with GAM smoothing terms for logistic regression
preds_gam_log <- predict( gam_log,
newdata = data.frame( temperature = 0.40, windspeed = 0.5,
count = 70, season = '3'  )  )
preds_gam_log
# logistic fit
log_mod = gam( workingday ~ temperature + windspeed +
count + season,
data = bikes2 , family = binomial )
summary(log_mod)
# prediction with logistic fit
preds_log <- predict( log_mod,
newdata = data.frame( temperature = 0.40, windspeed = 0.5,
count = 70, season = '3'  )  )
preds_log
AIC(log_mod)
AIC(gam_log)
anova(log_mod, gam_log, test="Chisq")
# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
library(tidyverse)    # functions for data manipulation
library(ggplot2)
library(MASS)
library(dplyr)
library(GGally)
library(kableExtra)
library(DT)
# import data
bikes <- read.csv('bikes_hour.csv')
datatable(bikes)
#data type of variables
str(bikes)
# check NAs
colSums(is.na(bikes))
# check zeros
colSums(bikes == 0, na.rm = TRUE)
# correlation between numeric variables
num_corr_tb<- bikes %>%
#include dplyr::, otherwise dplyr would clash with MASS package
dplyr::select(-season, -dteday, -instant, -holiday, -weekday,
-workingday, -registered)
#num_corr_tb
datatable(cor(num_corr_tb))
library(gam)
#library(mgcv)
# fit the GAM model for linear regression
gam_lin = gam( count ~ s(temperature) + s(windspeed) +
workingday + season,
data = bikes )
summary(gam_lin)
par( mfrow = c(1,4) )
plot( gam_lin,  se = TRUE, col = "blue" )
# convert Gender to factor
bikes1 = bikes
bikes1$workingday = factor(bikes1$workingday)
bikes1$season = factor(bikes1$season)
# fit the GAM model for linear regression with updated Gender(factorized)
gam1_lin = gam( count ~ s(temperature) + s(windspeed) +
workingday + season,
data = bikes1 )
summary(gam1_lin)
par( mfrow = c(1,4) )
plot( gam1_lin,  se = TRUE, col = "blue" )
preds_gam_lin <- predict( gam1_lin,
newdata = data.frame( temperature = 0.40, windspeed = 0.5,
workingday = '1', season = '1' )  )
preds_gam_lin
library(gam)
# linear fit
linear_mod = gam( count ~ temperature + windspeed +
workingday + season,
data = bikes1 )
summary(linear_mod)
preds_lin <- predict( linear_mod,
newdata = data.frame( temperature = 0.40, windspeed = 0.5,
workingday = '1', season = '1' )   )
preds_lin
AIC(linear_mod)
AIC(gam1_lin)
anova(linear_mod, gam1_lin, test="Chisq")
## factor holiday, workingday, and season into categorical variables with levels
bikes2 = bikes
bikes2$holiday = factor(bikes$holiday)
bikes2$workingday = factor(bikes2$workingday)
bikes2$season = factor(bikes2$season)
# fit the GAM model for logistic regression
gam_log = gam( holiday ~ s(temperature) + s(windspeed) +
s(count) + season,
data = bikes2 , family = binomial)
summary(gam_log)
par( mfrow = c(1,4) )
plot( gam_log,  se = TRUE, col = "blue" )
# prediction with GAM smoothing terms for logistic regression
preds_gam_log <- predict( gam_log,
newdata = data.frame( temperature = 0.80, windspeed = 0.5,
count = 70, season = '3'  )  )
# log-odd
preds_gam_log
# probability
predicted_probability <- plogis(preds_gam_log)
predicted_probability
# logistic fit
log_mod = gam( holiday ~ temperature + windspeed +
count + season,
data = bikes2 , family = binomial )
summary(log_mod)
# prediction with logistic fit
preds_log <- predict( log_mod,
newdata = data.frame( temperature = 0.80, windspeed = 0.5,
count = 70, season = '3'  )  )
# log-odd
preds_log
# probability
predicted_probability <- plogis(preds_log)
predicted_probability
AIC(log_mod)
AIC(gam_log)
anova(log_mod, gam_log, test="Chisq")
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point()
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(aes(alpha=0.5))
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.3)
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2)
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(lin_mod, lwd=3, color='red')
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(lin_mod), lwd=3, color='red')
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(lin_mod)
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(lin_mod))
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=lin_mod))
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=gam_mod))
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm))
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, lwd=3, color='red')) +
geom_line(aes(y=predgam, lwd=3, color='blue')) +
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, lwd=3, color='red')) +
geom_line(aes(y=predgam, lwd=3, color='blue'))
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, lwd=2, color='red')) +
geom_line(aes(y=predgam, lwd=2, color='blue'))
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, color='SLR')) +
geom_line(aes(y=predgam, color='GAM LR')) +
scale_color_manual(name='Model', values=c("red", "blue"))
lin_mod = gam( count ~ temperature, data = bikes1 )
gam_mod = gam( count ~ s(temperature), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=temperature, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, color='SLR'), lwd=2) +
geom_line(aes(y=predgam, color='GAM LR'), lwd=2) +
scale_color_manual(name='Model', values=c("red", "blue"))
lin_mod = gam( count ~ windspeed, data = bikes1 )
gam_mod = gam( count ~ s(windspeed), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=windspeed, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, color='SLR'), lwd=2) +
geom_line(aes(y=predgam, color='GAM LR'), lwd=2) +
scale_color_manual(name='Model', values=c("red", "blue"))
lin_mod = gam( count ~ windspeed, data = bikes1 )
gam_mod = gam( count ~ s(windspeed), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=windspeed, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, color='SLR'), lwd=2) +
geom_line(aes(y=predgam, color='GAM LR'), lwd=2) +
scale_color_manual(name='Model', values=c("blue", "red"))
lin_mod = gam( count ~ windspeed, data = bikes1 )
gam_mod = gam( count ~ s(windspeed), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=windspeed, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, color='SLR'), lwd=1) +
geom_line(aes(y=predgam, color='GAM LR'), lwd=1) +
scale_color_manual(name='Model', values=c("blue", "red"))
lin_mod = gam( count ~ windspeed, data = bikes1 )
gam_mod = gam( count ~ s(windspeed), data = bikes1 )
predlm = predict(lin_mod)
predgam = predict(gam_mod)
ggplot(bikes1, aes(x=windspeed, y=count)) +
geom_point(alpha=0.2) +
geom_line(aes(y=predlm, color='SLR'), lwd=1.5) +
geom_line(aes(y=predgam, color='GAM LR'), lwd=1.5) +
scale_color_manual(name='Model', values=c("blue", "red"))
